# ******************************************************************************************
# FileName     : Kit_SmartFactory2_AI.py
# Description  : 이티보드 스마트 팩토리 2 코딩 키트(AI)
# Author       : 박은정
# Created Date : 2025.06.13 : PEJ 
# Reference    :
# ******************************************************************************************
board_firmware_version = 'FtyAI_1.0'


#========================================================================================
# import
#========================================================================================
import time                                              # 시간 관련 라이브러리
import sys                                               # 시스템 관련 라이브러리
from machine import Pin                                  # 핀 관련 라이브러리
from ETboard.lib.pin_define import *                     # ETboard 핀 관련 라이브러리


#===========================================================================================
# OLED 표시 장치 사용하기
#===========================================================================================
from ETboard.lib.OLED_U8G2 import *                      # ETboard OLED 관련 라이브러리
oled = oled_u8g2()


#===========================================================================================
# 서보모터 사용하기
#===========================================================================================
from ETboard.lib.servo import Servo                      # ETboard Servo 관련 라이브러리
servo_block = Servo(Pin(D4))                             # 서보모터(차단대) 핀 : D4
servo_geer = Servo(Pin(D5))                              # 서보모터(차단대) 핀 : D5


#===========================================================================================
# 블루투스 사용하기
#===========================================================================================
from BluetoothSerial import BluetoothSerial              # 블루투스 통신 관련 라이브러리
SerialBT = BluetoothSerial()                             # 블루투스 통신 설정


#===========================================================================================
# 전역 변수 선언
#===========================================================================================
button_push = Pin(D7)                                    # 톱니바퀴 작동 버튼 핀 : D7

count = 0                                                # 지나간 물건 개수

distance = 0                                             # 거리
pos = 0                                                  # 컨베이어 위치 상태
block_state = 'close'                                    # 차단대 상태

ai_result = "background"                                 # AI 결과 값
prev_result = "background"                               # 이전 AI 결과 값

ai_label = {                                             # AI 라벨(ID, 동물)
    0: "background",                                     # AI 결과 값 0: 배경
    1: "red",                                            # AI 결과 값 1: 빨강
    2: "blue",                                           # AI 결과 값 2: 파랑
    3: "yellow",                                         # AI 결과 값 3: 노랑
}

short_previous_time = 0                                  # OLED 출력 이전 시간
long_previous_time = 0                                   # 쉘 출력 이전 시간


#===========================================================================================
def setup():                                             # 설정 함수
#===========================================================================================
    button_push.init(Pin.IN)                             # 밀기 버튼 : 입력 모드

    initializing_process()                               # 초기화

    print('블루투스 이름 : ' + SerialBT._ble_name)       # 블루투스 이름 출력

    SerialBT.on_received(handle_data)         # 수신받은 데이터를 처리하기 위한 함수 연결
    time.sleep(1)


#===========================================================================================
def handle_data(msg):                                    # 수신 데이터 처리 함수
#===========================================================================================
    global ai_result

    byte_data = msg                                      # 바이트 문자열
    number = int(byte_data.decode('utf-8'))

    ai_result = ai_label[number]                         # 디코딩 후 정수로 변환


#===========================================================================================
def initializing_process():                              # 초기화
#===========================================================================================
    global count, pos, block_state

    count = 0                                            # 개수를 0으로 초기화
    pos = 0                                              # 각도 상태를 0으로 초기화
    block_state = 'close'                                # 차단대 상태를 닫힘으로 초기화

    do_geer_process()                                    # 각도 재설정
    servo_block.write_angle(0)                           # 차단대 재설정

    oled_display()                                       # OLED 출력


#===========================================================================================
def loop():                                              # 반복 함수
#===========================================================================================
    global count, prev_result                            # 전역 변수 호출

    if not SerialBT.is_connected():                      # 블루투스가 연결되지 않았다면
        print('연결되지 않았습니다.')                    # 쉘에 "연결되지 않았습니다." 출력
        time.sleep(1)
        return

    do_sensing_process()                                 # 센싱 처리
    do_automatic_process()                               # 자동화 처리
    et_short_periodic_process()                          # 주기적 실행 함수

#===========================================================================================
def do_sensing_process():                                # 센싱 처리
#===========================================================================================
    global pos

    if button_push.value() == LOW:                       # 드럼통 출고 버튼이 눌렸다면
        while True:
            if button_push.value() == HIGH:
                break
        pos += 1                                         # 톱니바퀴 작동
        do_geer_process()

    time.sleep(0.1)


#===========================================================================================
def do_geer_process():                                   # 차단대 작동 처리
#===========================================================================================
    global pos

    p = [180, 137, 98 , 59]                              # 각도 저장

    if pos > 3:                                          # 각도가 3보다 크다면
        pos = 0                                          # 각도를 0으로 변경

    servo_geer.write_angle(p[pos])                       # 톱니바퀴를 최종 각도로 설정


#===========================================================================================
def do_automatic_process():                              # 자동화 처리
#===========================================================================================
    global count, block_state, prev_result, ai_result, ai_label

    # 이전 AI 결과 값과 현재 AI 결과 값이 다르면서 현재 AI 결과 값이 배경이 아닐 경우
    if prev_result != ai_result and ai_result != ai_label[0]:
        count += 1                                       # 드럼통 출고 개수 증가

        servo_block.write_angle(75)                      # 차단대 열기
        block_state = 'open'                             # 차단대 상태 변경
        oled_display()                                   # OLED 출력
        time.sleep(1)

        servo_block.write_angle(0)                       # 차단대 닫기
        block_state = 'close'                            # 차단대 상태 변경
        oled_display()                                   # OLED 출력

    prev_result = ai_result                              # 이전 AI 결과 값 갱신


#===========================================================================================
def et_short_periodic_process():                         # 사용자 주기적 처리 (예 : 1초마다)
#===========================================================================================
    global now, short_previous_time

    interval = 1                                         # 5초마다 정보 표시
    now = int(round(time.time()))                        # 현재 시간 저장

    if now - short_previous_time < interval:              # 5초가 지나지 않았다면
        return

    short_previous_time = now                            # OLED 출력 이전 시간 갱신

    oled_display()                                       # OLED 출력
    shell_display()                                      # 쉘 출력


#===========================================================================================
def oled_display():                                      # OLED 출력 함수
#===========================================================================================
    global board_firmware_version, count, pos, ai_result

    string_count = "%d" % count                          # 개수 값 문자열 저장
    string_pos = "%d" % pos                              # 각도 상태 문자열 저장

    oled.clear()                                         # OLED 초기화

    oled.setLine(1, board_firmware_version)              # OLED 첫 번째 줄 : 시스템 이름
    oled.setLine(2, 'count: ' + string_count)            # OLED 두 번째 줄: 드럼통 출고 개수
    oled.setLine(3, 'pos: ' + string_pos)                # OLED 세 번째 줄: 각도 상태
    oled.setLine(4, 'AI: ' + ai_result)                  # OLED 네 번째 줄: 드럼통 색상

    oled.display()                                       # OLED 출력


#===========================================================================================
def shell_display():                                     # 쉘 출력 함수
#===========================================================================================
    global count, pos, ai_result

    string_count = "%d" % count                          # 개수 값 문자열 저장
    string_pos = "%d" % pos                              # 각도 상태 문자열 저장

    print('count: ' + string_count)                      # 쉘 첫 번째 줄: 드럼통 출고 개수
    print('pos: ' + string_pos)                          # 쉘 두 번째 줄: 각도 상태
    print('AI: ' + ai_result)                            # 쉘 세 번째 줄: 드럼통 색상
    print("-----------------------")


#===========================================================================================
# start point
#===========================================================================================
if __name__ == "__main__" :
    setup()
    while True :
        loop()


#===========================================================================================
#                                                    
# (주)한국공학기술연구원 http://et.ketri.re.kr       
#
#===========================================================================================
